@page "/"
@using Social.Interfaces
@using DTOs.Models
@inject IUserService UserService
@inject NavigationManager NavigationManager

<h1 class="fw-bold mb-4">My Contacts</h1>

<!-- There may be a way of doing this without bind:event and bind:after, but this is by far simpler and smoother and relatively intuitive.  
     Since there is no SQL integration where we are communicating with a database via API, we are not using async, 
     though it probably would make sense to for these types of CRUD related tasks. We'll cross that bridge when we get there.
-->

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search contacts..." @bind="searchQuery" @bind:event = "oninput" @bind:after="this.FilterContacts"/> 
</div>

@if (UserService.GetUserProfiles().Any())
{
    /* Some of the styling of accordion with bootstrap was done with the help of ChatGPT-4o */
    <div class="accordion" id="userProfilesAccordion">
        @foreach (var user in filteredUserProfiles?.OrderBy(u => u.LastName)!)
        {
            <div class="accordion-item">
                <h2 class="accordion-header d-flex align-items-center justify-content-between" id="heading-@user.Id">
                    <button class="accordion-button collapsed d-flex align-items-center" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@user.Id" aria-expanded="false" aria-controls="collapse-@user.Id">
                        <div style="width: 40px; height: 40px; display: inline-block; margin-right:0.5rem;">
                            <img src="Images/person-circle.svg" style="width:100%;" />
                        </div>
                        <strong style="font-size:1.2em; margin-right:auto;">@user.FirstName @user.LastName</strong>
                    </button>
                </h2>
                <div id="collapse-@user.Id" class="accordion-collapse collapse" aria-labelledby="heading-@user.Id" data-bs-parent="#userProfilesAccordion">
                    <div class="accordion-body d-flex flex-column justify-content-between">
                        <p><strong>Email:</strong> @user.Email</p>
                        <p><strong>Phone Number:</strong> @user.PhoneNumber</p>
                        <p><strong>Address:</strong> @user.Address</p>
                        <p><strong>Postal Number:</strong> @user.PostalNumber</p>
                        <p><strong>Locality:</strong> @user.Locality</p>
                        <p><strong>Id:</strong> @user.Id</p>

                        <div class = "ms-auto">
                            <button class="btn btn-warning btn-sm mx-2" @onclick="() => NavigateToEdit(user.Id)">
                                <div style="width: 20px; height: 20px;">
                                    <img src="Images/pencil-square.svg" style="width:100%;" />
                                </div>
                            </button>

                            <!-- Modal integration done with the help of ChatGPT -->
                            <button class="btn btn-danger btn-sm ms-auto" data-bs-toggle="modal" data-bs-target="#confirmDeleteModal" @onclick="() => SetUserIdForDelete(user.Id)">
                                <div style="width: 20px; height: 20px;">
                                    <img src="Images/trash.svg" style="width:100%;" />
                                </div>
                            </button>
                        </div>

                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No user data found</p>
}

<!-- 
Modal boilerplate was written with the help of ChatGPT, I have edited it to fit my use case. 
The modal is intended to prevent accidentally deleting contacts and prompts the user to confirm their choice.
Since bootstrap already had this feature, it made sense to make use of it for adding this quality of life feature.
Notably, this was not a required feature, not even for the highest grade, however it made sense to me to add this. 
-->

<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this contact?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteUser" data-bs-dismiss="modal">Delete</button>
            </div>
        </div>
    </div>
</div>


@code { // Live search functionality
    private string searchQuery = string.Empty;
    private IEnumerable<UserContactProfile>? allUserProfiles;
    private IEnumerable<UserContactProfile>? filteredUserProfiles;

    protected override void OnInitialized()
    {
        allUserProfiles = UserService.GetUserProfiles(); 
        filteredUserProfiles = allUserProfiles; 
    }

    private void FilterContacts()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredUserProfiles = allUserProfiles;
        }
        else
        {
            string trimmedQuery = searchQuery.Trim().ToLowerInvariant();
            filteredUserProfiles = allUserProfiles?
                .Where(u => u.FirstName.ToLowerInvariant().Contains(trimmedQuery) ||
                            u.LastName.ToLowerInvariant().Contains(trimmedQuery)  ||
                            u.Email.ToLowerInvariant().Contains(trimmedQuery)     ||
                            u.Locality.ToLowerInvariant().Contains(trimmedQuery)  ||
                            u.PostalNumber.Contains(trimmedQuery)                 ||
                            u.Address.ToLowerInvariant().Contains(trimmedQuery)   ||
                            u.PhoneNumber.Contains(trimmedQuery))
                            
                .ToList();
        }
    }
}

@code {// Contact deletion functionality
    private string? userIdToDelete;

    private void SetUserIdForDelete(string userId)
    {
        userIdToDelete = userId;
    }

    private void ConfirmDeleteUser()
    {
        bool isDeleted = UserService.DeleteUserProfile(userIdToDelete!);
        if (isDeleted)
        {
            StateHasChanged();
            filteredUserProfiles = UserService.GetUserProfiles();
            searchQuery = string.Empty;
        }
    }
}

@code { // Editing functionality
    private void NavigateToEdit(string userId)
    {
        NavigationManager.NavigateTo($"/EditUser?userId={userId}");
    }

}
